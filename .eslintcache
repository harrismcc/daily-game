[{"/home/siim/Documents/gameADay/11-25-20/my-app/src/reportWebVitals.ts":"1","/home/siim/Documents/gameADay/11-25-20/my-app/src/App.tsx":"2","/home/siim/Documents/gameADay/11-25-20/my-app/src/index.tsx":"3","/home/siim/Documents/gameADay/11-25-20/my-app/src/capsuleSpinner.tsx":"4"},{"size":425,"mtime":1606358425604,"results":"5","hashOfConfig":"6"},{"size":263,"mtime":1606373633970,"results":"7","hashOfConfig":"6"},{"size":500,"mtime":1606359200678,"results":"8","hashOfConfig":"6"},{"size":3809,"mtime":1606373645439,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"q3ncis",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/siim/Documents/gameADay/11-25-20/my-app/src/reportWebVitals.ts",[],"/home/siim/Documents/gameADay/11-25-20/my-app/src/App.tsx",["20"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { CapsuleSpinner } from './capsuleSpinner';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CapsuleSpinner></CapsuleSpinner>\n    </div>\n  );\n}\n\nexport default App;\n","/home/siim/Documents/gameADay/11-25-20/my-app/src/index.tsx",[],"/home/siim/Documents/gameADay/11-25-20/my-app/src/capsuleSpinner.tsx",["21","22","23","24"],"import React, { Component } from 'react';\nimport * as THREE from \"three\";\n\n\nexport class CapsuleSpinner extends Component {\n    //test: React.RefObject<unknown>;\n    mount: any;\n    state = {\n        gameWon : false\n    }\n\n\n\n    componentDidMount(){\n\n        const hslToString = function(hsl : {h : number, s : number, l : number}) : string {\n            let {h, s, l} = hsl;\n            return \"hsl(\" + h.toString() + \",\" + s.toString() + \"%,\" + l.toString() + \"%)\"\n        }\n        // === THREE.JS CODE START ===\n        var scene = new THREE.Scene();\n        var camera = new THREE.PerspectiveCamera( \n            75, \n            window.innerWidth/window.innerHeight, \n            0.1, \n            1000 \n        );\n\n        var renderer = new THREE.WebGLRenderer();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.type = THREE.BasicShadowMap;\n\n        this.mount.appendChild( renderer.domElement );\n\n        var capsuleColor = {h : 11, s : 30, l : 50}\n\n        const geometry = new THREE.ConeGeometry(0.7, 1, 5);\n        const material = new THREE.MeshLambertMaterial( { color: hslToString(capsuleColor) } )\n        const capsule = new THREE.Mesh( geometry, material );        \n        scene.add( capsule );\n\n        \n\n        const ambientLight = new THREE.AmbientLight(0xffffff, 1.0);\n        scene.add( ambientLight );\n\n        var spotLight = new THREE.PointLight(0xffffff, 0.5 );\n        spotLight.position.set(10, 10, 10);\n        spotLight.castShadow = true;\n        spotLight.shadow.camera.near = 0.1;\n        spotLight.shadow.camera.far = 25;\n        scene.add( spotLight );\n\n        camera.position.z = 3;\n\n        camera.lookAt(scene.position);\n\n        var xRate = Math.round((Math.random() * (30 - 5)))/1000;\n        var yRate = Math.round((Math.random() * (30 - 5)))/1000;\n\n        document.onkeydown = function(key) {\n\n            if (key.key == \"ArrowLeft\"){\n                yRate += -0.001;\n            } else if (key.key == \"ArrowRight\"){\n                yRate += 0.001;\n            } else if (key.key == \"ArrowUp\"){\n                xRate += -0.001;\n            } else if (key.key == \"ArrowDown\"){\n                xRate += 0.001;\n            }\n\n            xRate = Math.round(xRate * 1000) / 1000\n            yRate = Math.round(yRate * 1000) / 1000\n        }\n        \n        \n        var animate = function (this: any, callback: Function) {\n            \n            //light.position.x += 0.05\n            const frame = requestAnimationFrame( animate.bind(this, callback) );\n\n            if (xRate === 0.0 && yRate === 0.0){\n                cancelAnimationFrame( frame )\n                callback();\n            } else {\n\n                capsuleColor.h = 117 - (((xRate + yRate)*1000) + 25);\n                capsule.material.color = new THREE.Color(hslToString(capsuleColor))\n                capsule.rotation.x += xRate;\n                capsule.rotation.y += yRate;\n                renderer.render( scene, camera );\n            }\n          \n\n\n \n        };\n\n        animate(() => {this.setState({gameWon : true})});\n        // === THREE.JS EXAMPLE CODE END ===\n    }\n\n    render(){\n\n        let gameWon = this.state.gameWon\n        let winText = <h1 style={{margin : 0, color : \"lightblue\", position : \"absolute\"}}>\n            Tap the arrow keys to stop the capsule from spinning!\n        </h1>\n        if (gameWon){\n            winText = <h1 style={{\n                color : \"lightblue\",\n                position : \"absolute\"\n            }}>You Win!</h1>\n        }\n        return (\n            <div>\n                {winText}\n                <div ref={ref => (this.mount = ref)} />\n            </div>\n        )\n    }\n}\n\n\n\n//const rootElement = document.getElementById(\"root\");\n//ReactDOM.render()",{"ruleId":"25","severity":1,"message":"26","line":2,"column":8,"nodeType":"27","messageId":"28","endLine":2,"endColumn":12},{"ruleId":"29","severity":1,"message":"30","line":64,"column":25,"nodeType":"31","messageId":"32","endLine":64,"endColumn":27},{"ruleId":"29","severity":1,"message":"30","line":66,"column":32,"nodeType":"31","messageId":"32","endLine":66,"endColumn":34},{"ruleId":"29","severity":1,"message":"30","line":68,"column":32,"nodeType":"31","messageId":"32","endLine":68,"endColumn":34},{"ruleId":"29","severity":1,"message":"30","line":70,"column":32,"nodeType":"31","messageId":"32","endLine":70,"endColumn":34},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]