{"version":3,"sources":["capsuleSpinner.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CapsuleSpinner","mount","state","gameWon","hslToString","hsl","h","s","l","toString","scene","THREE","camera","window","innerWidth","innerHeight","renderer","setSize","shadowMap","enabled","type","this","appendChild","domElement","capsuleColor","geometry","material","color","capsule","add","ambientLight","spotLight","position","set","castShadow","shadow","near","far","z","lookAt","xRate","Math","round","random","yRate","document","onkeydown","key","animate","callback","frame","requestAnimationFrame","bind","cancelAnimationFrame","rotation","x","y","render","setState","winText","style","margin","ref","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fdb38ffd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from \"three\";\n\n\nexport class CapsuleSpinner extends Component {\n    //test: React.RefObject<unknown>;\n    mount: any;\n    state = {\n        gameWon : false\n    }\n\n\n\n    componentDidMount(){\n\n        const hslToString = function(hsl : {h : number, s : number, l : number}) : string {\n            let {h, s, l} = hsl;\n            return \"hsl(\" + h.toString() + \",\" + s.toString() + \"%,\" + l.toString() + \"%)\"\n        }\n        // === THREE.JS CODE START ===\n        var scene = new THREE.Scene();\n        var camera = new THREE.PerspectiveCamera( \n            75, \n            window.innerWidth/window.innerHeight, \n            0.1, \n            1000 \n        );\n\n        var renderer = new THREE.WebGLRenderer();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.type = THREE.BasicShadowMap;\n\n        this.mount.appendChild( renderer.domElement );\n\n        var capsuleColor = {h : 11, s : 30, l : 50}\n\n        const geometry = new THREE.ConeGeometry(0.7, 1, 5);\n        const material = new THREE.MeshLambertMaterial( { color: hslToString(capsuleColor) } )\n        const capsule = new THREE.Mesh( geometry, material );        \n        scene.add( capsule );\n\n        \n\n        const ambientLight = new THREE.AmbientLight(0xffffff, 1.0);\n        scene.add( ambientLight );\n\n        var spotLight = new THREE.PointLight(0xffffff, 0.5 );\n        spotLight.position.set(10, 10, 10);\n        spotLight.castShadow = true;\n        spotLight.shadow.camera.near = 0.1;\n        spotLight.shadow.camera.far = 25;\n        scene.add( spotLight );\n\n        camera.position.z = 3;\n\n        camera.lookAt(scene.position);\n\n        var xRate = Math.round((Math.random() * (30 - 5)))/1000;\n        var yRate = Math.round((Math.random() * (30 - 5)))/1000;\n\n        document.onkeydown = function(key) {\n\n            if (key.key == \"ArrowLeft\"){\n                yRate += -0.001;\n            } else if (key.key == \"ArrowRight\"){\n                yRate += 0.001;\n            } else if (key.key == \"ArrowUp\"){\n                xRate += -0.001;\n            } else if (key.key == \"ArrowDown\"){\n                xRate += 0.001;\n            }\n\n            xRate = Math.round(xRate * 1000) / 1000\n            yRate = Math.round(yRate * 1000) / 1000\n        }\n        \n        \n        var animate = function (this: any, callback: Function) {\n            \n            //light.position.x += 0.05\n            const frame = requestAnimationFrame( animate.bind(this, callback) );\n\n            if (xRate === 0.0 && yRate === 0.0){\n                cancelAnimationFrame( frame )\n                callback();\n            } else {\n\n                capsuleColor.h = 117 - (((xRate + yRate)*1000) + 25);\n                capsule.material.color = new THREE.Color(hslToString(capsuleColor))\n                capsule.rotation.x += xRate;\n                capsule.rotation.y += yRate;\n                renderer.render( scene, camera );\n            }\n          \n\n\n \n        };\n\n        animate(() => {this.setState({gameWon : true})});\n        // === THREE.JS EXAMPLE CODE END ===\n    }\n\n    render(){\n\n        let gameWon = this.state.gameWon\n        let winText = <h1 style={{margin : 0, color : \"lightblue\", position : \"absolute\"}}>\n            Tap the arrow keys to stop the capsule from spinning!\n        </h1>\n        if (gameWon){\n            winText = <h1 style={{\n                color : \"lightblue\",\n                position : \"absolute\"\n            }}>You Win!</h1>\n        }\n        return (\n            <div>\n                {winText}\n                <div ref={ref => (this.mount = ref)} />\n            </div>\n        )\n    }\n}\n\n\n\n//const rootElement = document.getElementById(\"root\");\n//ReactDOM.render()","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { CapsuleSpinner } from './capsuleSpinner';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CapsuleSpinner></CapsuleSpinner>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}